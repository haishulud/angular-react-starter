name: myCI

on:
  #workflow_dispatch: #manual start from Github UI or API
  push:
    branches: dev
  pull_request:
    branches: dev

jobs:
  test:
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: angular

    strategy:
      matrix:
        node-version: [16.x]
       #node-version: [16.x, 14.x] #used this line instead of the one above to emulate errors in the test phase AND to test matrix syntax
    
    steps:
      - uses: actions/checkout@v3
      
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: install
        run: npm ci

      - name: lint
        run: npm run lint
     
      - name: run
        id: test_phase
        run: npm run test -- --watch=false --browsers=ChromeHeadless

      - name: check #Check if tests were successful and exit on failure
        if: ${{ failure() && steps.test_phase.conclusion == 'failure' }}
        run: exit 1

    
  build:
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    needs: test

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:      
      contents: read  #permissions for publishing Docker images to Github Packages
      packages: write #permissions for publishing Docker images to Github Packages
    
    defaults:
      run:
        working-directory: angular
    
    steps:
      - uses: actions/checkout@v3
      
      - name: use node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      
      - name: install
        run: npm ci

      - name: buld
        run: npm run build

      #---Build Docker image, Login & Publish to Docker Packages---
      - name: login #log in to the container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

      - name: build Docker image on push event ###########
        run: docker build -t $REGISTRY/$IMAGE_NAME:${GITHUB_SHA::7} -t $REGISTRY/$IMAGE_NAME:${GITHUB_SHA: -7:0} -t $REGISTRY/$IMAGE_NAME:latest .

      - name: push Docker image on push event ########
        if: github.event_name == 'push'
        run: docker push $REGISTRY/$IMAGE_NAME:${GITHUB_SHA::7} && docker push $REGISTRY/$IMAGE_NAME:latest

  
  stats:
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    if: ${{ always() }}
    needs: [build, test]
    steps:
      - name:  Extract TEST and BUILD job starting & ending time #####
        id: execution_timestamps
        run: |
          echo "::set-output name=starttime_test::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[0].started_at')" && echo "::set-output name=endtime_test::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[0].completed_at')"
          echo "::set-output name=starttime_build::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[1].started_at')" && echo "::set-output name=endtime_build::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[1].completed_at')"

      - name: calculate time
        id: calculate_time
        run: |
          started_at_test=${{steps.execution_timestamps.outputs.starttime_test}}
          completed_at_test=${{steps.execution_timestamps.outputs.endtime_test}}
          started_at_build=${{steps.execution_timestamps.outputs.starttime_build}}
          completed_at_build=${{steps.execution_timestamps.outputs.endtime_build}}

          START_TIME_TEST=$(date -d "$started_at_test" +%s)
          END_TIME_TEST=$(date -d "$completed_at_test" +%s)
          START_TIME_BUILD=$(date -d "$started_at_build" +%s)
          END_TIME_BUILD=$(date -d "$completed_at_build" +%s)

          ELAPSE_TEST=$(( $END_TIME_TEST - $START_TIME_TEST ))
          ELAPSE_BUILD=$(( $END_TIME_BUILD - $START_TIME_BUILD ))
          ELAPSE=$(( $ELAPSE_TEST + $ELAPSE_BUILD ))
          echo $ELAPSE
          echo "$(($ELAPSE/60/60))h $(($ELAPSE/60%60))m $(($ELAPSE%60))s"
          echo "::set-output name=elpsd::$ELAPSE"
          echo "::set-output name=el_hours::$(($ELAPSE/60/60))"
          echo "::set-output name=el_minutes::$(($ELAPSE/60%60))"
          echo "::set-output name=el_seconds::$(($ELAPSE%60))"
      
      - name: get email for Committer on PR or pusher on PUSH ########
        id: email
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=user_email::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs | jq '.workflow_runs[0].head_commit.committer.email')"
          else
            echo "::set-output name=user_email::${{ github.event.pusher.email }}"
          fi

      - name: Get job conclusion (success or failure) ########
        id: job_conclusion
        run: |
          echo "::set-output name=test_conclusion::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[0].conclusion')"
          echo "::set-output name=build_conclusion::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[1].conclusion')"

      #---Email notifications with elapsed time---
      - name: Send email notifications for this job
        if: ${{ always() }} #run this step even if previous steps failed
        uses: dawidd6/action-send-mail@6d23605227c578d570e5594931720f85a1af55a2
        with:
          # SMTP server address
          server_address: ${{ secrets.MAIL_SERVER }}
          # SMTP server port
          server_port: 465
          # Authenticate as this user to SMTP server
          username: ${{ secrets.MAIL_USERNAME }}
          # Authenticate with this password to SMTP server
          password: ${{ secrets.MAIL_PASSWORD }}
          # Subject of mail message
          subject: Github Actions job result
          # Recipients mail addresses (separated with comma)
          to: ${{ steps.email.outputs.user_email }} #${{ github.event.pusher.email }}
          # Full name of mail sender (might be with an email address specified in <>)
          from: Github CI
          # Whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Body of mail message (might be a filename prefixed with file:// to read from)
          body: Build job for ${{ github.repository }} has completed. Result status for TESTS-${{ steps.job_conclusion.outputs.test_conclusion }}, for BUILD JOB-${{ steps.job_conclusion.outputs.build_conclusion }} . Time ${{ steps.calculate_time.outputs.el_hours }}h ${{ steps.calculate_time.outputs.el_minutes }}m ${{ steps.calculate_time.outputs.el_seconds }}s (${{ steps.calculate_time.outputs.elpsd }} sec)
          # Allow unsigned/invalid certificates
          ignore_cert: true