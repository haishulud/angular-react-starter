name: myCI

on:
  #workflow_dispatch: #manual start from Github UI or API
  push:
    branches: master
  #pull_request:
    #branches: master

jobs:
  main_job:
    runs-on: ubuntu-latest
    permissions:      
      contents: read  #permissions for publishing Docker images to Github Packages
      packages: write #permissions for publishing Docker images to Github Packages
          
    defaults:
      run:
        working-directory: angular 

    strategy:
      matrix:
        node-version: [16.x]
       #node-version: [16.x, 14.x] #used this line instead of the one above to emulate errors in the test phase AND to test matrix syntax
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies
        #run: npm install
        run: npm ci  		#"ci" is (theoretically?) faster than "install"
      
      - name: Buld phase
        run: npm run build
      
      - name: Test phase
        id: test_phase
        run: npm run test -- --watch=false --browsers=ChromeHeadless

      - name: Check if tests were successful and exit on failure
        if: ${{ failure() && steps.test_phase.conclusion == 'failure' }}
        run: exit 1

      - name: Linting
        run: npm run lint #not in the task, but still running it... just because I can
      
      #---Build Docker image, Login & Publish to Docker Packages---
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./angular
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      #- name: Job's running time !!!!!this approach DOESN'T WORK!!!! because .run_duration_ms parameter is awailable only after this workflow completion and accessible only from other actions, which isn't possible according to this test task conditions (I can't create additional yaml files)
      #  id: execution_time
      #  run: |
      #    curl \
      #      -H "Accept: application/vnd.github+json" \ 
      #      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #      https://api.github.com/repos/${{ github.actor }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/timing

      
  stats_job:
    runs-on: ubuntu-latest
    needs: main_job
    steps:
      - name:  Extract job starting & ending time
        id: execution_timestamps
        run: |
          echo "::set-output name=starttime::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[0].started_at')" && echo "::set-output name=endtime::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[0].completed_at')"
      
      - name: calculate time
        id: calculate_time
        run: |
          started_at=${{steps.execution_timestamps.outputs.starttime}}
          completed_at=${{steps.execution_timestamps.outputs.endtime}}

          START_TIME=$(date -d "$started_at" +%s)
          END_TIME=$(date -d "$completed_at" +%s)

          ELAPSE=$(( $END_TIME - $START_TIME ))
          echo $ELAPSE
          echo ${{github.event.pusher.email}}
          echo "$(($ELAPSE/60/60))h $(($ELAPSE/60%60))m $(($ELAPSE%60))s"
          echo "::set-output name=elpsd::$ELAPSE"
          echo "::set-output name=el_hours::$(($ELAPSE/60/60))"
          echo "::set-output name=el_minutes::$(($ELAPSE/60%60))"
          echo "::set-output name=el_seconds::$(($ELAPSE%60))"

      - name: Get job conclusion (success or failure)
        id: job_conclusion
        run: |
          echo "::set-output name=main_job_conclusion::$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs | jq '.jobs[0].conclusion')"
      
      - name: Get user's email
        id: fetch_email
        run: |
          echo "::set-output name=usermail::$(git log -n 1 --pretty=format:%ae)"

      #---Email notifications v2 with elapsed time---
      - name: Send email notifications for this job v2
        if: ${{ always() }} #run this step even if previous steps failed
        uses: dawidd6/action-send-mail@6d23605227c578d570e5594931720f85a1af55a2
        with:
          # SMTP server address
          server_address: ${{secrets.MAIL_SERVER}}
          # SMTP server port
          server_port: 465 #587
          # Authenticate as this user to SMTP server
          username: ${{secrets.MAIL_USERNAME}}
          # Authenticate with this password to SMTP server
          password: ${{secrets.MAIL_PASSWORD}}
          # Subject of mail message
          subject: Github Actions job result
          # Recipients mail addresses (separated with comma)
          to: ${{steps.fetch_email.outputs.usermail}} #${{github.event.pusher.email}}
          # Full name of mail sender (might be with an email address specified in <>)
          from: Github CI v2
          # Whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Body of mail message (might be a filename prefixed with file:// to read from)
          body: Build job for ${{github.repository}} has completed. Result status ${{steps.job_conclusion.outputs.main_job_conclusion}}. Time ${{steps.calculate_time.outputs.el_hours}}h ${{steps.calculate_time.outputs.el_minutes}}m ${{steps.calculate_time.outputs.el_seconds}}s (${{steps.calculate_time.outputs.elpsd}} sec)
          # Allow unsigned/invalid certificates
          ignore_cert: true